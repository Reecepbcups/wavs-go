// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package layertypes represents the imported interface "wavs:worker/layer-types@0.3.0-rc1".
package layertypes

import (
	"go.bytecodealliance.org/cm"
)

// CosmosAddress represents the record "wavs:worker/layer-types@0.3.0-rc1#cosmos-address".
//
//	record cosmos-address {
//		bech32-addr: string,
//		prefix-len: u32,
//	}
type CosmosAddress struct {
	_          cm.HostLayout `json:"-"`
	Bech32Addr string        `json:"bech32-addr"`

	// prefix is the first part of the bech32 address
	PrefixLen uint32 `json:"prefix-len"`
}

// CosmosEvent represents the record "wavs:worker/layer-types@0.3.0-rc1#cosmos-event".
//
//	record cosmos-event {
//		ty: string,
//		attributes: list<tuple<string, string>>,
//	}
type CosmosEvent struct {
	_          cm.HostLayout      `json:"-"`
	Ty         string             `json:"ty"`
	Attributes cm.List[[2]string] `json:"attributes"`
}

// CosmosChainConfig represents the record "wavs:worker/layer-types@0.3.0-rc1#cosmos-chain-config".
//
//	record cosmos-chain-config {
//		chain-id: string,
//		rpc-endpoint: option<string>,
//		grpc-endpoint: option<string>,
//		grpc-web-endpoint: option<string>,
//		gas-price: f32,
//		gas-denom: string,
//		bech32-prefix: string,
//	}
type CosmosChainConfig struct {
	_               cm.HostLayout     `json:"-"`
	ChainID         string            `json:"chain-id"`
	RPCEndpoint     cm.Option[string] `json:"rpc-endpoint"`
	GrpcEndpoint    cm.Option[string] `json:"grpc-endpoint"`
	GrpcWebEndpoint cm.Option[string] `json:"grpc-web-endpoint"`
	GasPrice        float32           `json:"gas-price"`
	GasDenom        string            `json:"gas-denom"`
	Bech32Prefix    string            `json:"bech32-prefix"`
}

// EthAddress represents the record "wavs:worker/layer-types@0.3.0-rc1#eth-address".
//
//	record eth-address {
//		raw-bytes: list<u8>,
//	}
type EthAddress struct {
	_        cm.HostLayout  `json:"-"`
	RawBytes cm.List[uint8] `json:"raw-bytes"`
}

// EthEventLogData represents the record "wavs:worker/layer-types@0.3.0-rc1#eth-event-log-data".
//
//	record eth-event-log-data {
//		topics: list<list<u8>>,
//		data: list<u8>,
//	}
type EthEventLogData struct {
	_ cm.HostLayout `json:"-"`
	// the raw log topics that can be decoded into an event
	Topics cm.List[cm.List[uint8]] `json:"topics"`

	// the raw log data that can be decoded into an event
	Data cm.List[uint8] `json:"data"`
}

// EthChainConfig represents the record "wavs:worker/layer-types@0.3.0-rc1#eth-chain-config".
//
//	record eth-chain-config {
//		chain-id: string,
//		ws-endpoint: option<string>,
//		http-endpoint: option<string>,
//	}
type EthChainConfig struct {
	_            cm.HostLayout     `json:"-"`
	ChainID      string            `json:"chain-id"`
	WsEndpoint   cm.Option[string] `json:"ws-endpoint"`
	HTTPEndpoint cm.Option[string] `json:"http-endpoint"`
}

// TriggerSourceEthContractEvent represents the record "wavs:worker/layer-types@0.3.0-rc1#trigger-source-eth-contract-event".
//
//	record trigger-source-eth-contract-event {
//		address: eth-address,
//		chain-name: string,
//		event-hash: list<u8>,
//	}
type TriggerSourceEthContractEvent struct {
	_         cm.HostLayout  `json:"-"`
	Address   EthAddress     `json:"address"`
	ChainName string         `json:"chain-name"`
	EventHash cm.List[uint8] `json:"event-hash"`
}

// TriggerSourceCosmosContractEvent represents the record "wavs:worker/layer-types@0.3.0-rc1#trigger-source-cosmos-contract-event".
//
//	record trigger-source-cosmos-contract-event {
//		address: cosmos-address,
//		chain-name: string,
//		event-type: string,
//	}
type TriggerSourceCosmosContractEvent struct {
	_         cm.HostLayout `json:"-"`
	Address   CosmosAddress `json:"address"`
	ChainName string        `json:"chain-name"`
	EventType string        `json:"event-type"`
}

// TriggerSource represents the variant "wavs:worker/layer-types@0.3.0-rc1#trigger-source".
//
//	variant trigger-source {
//		eth-contract-event(trigger-source-eth-contract-event),
//		cosmos-contract-event(trigger-source-cosmos-contract-event),
//		manual,
//	}
type TriggerSource cm.Variant[uint8, TriggerSourceCosmosContractEventShape, TriggerSourceCosmosContractEvent]

// TriggerSourceEthContractEvent_ returns a [TriggerSource] of case "eth-contract-event".
func TriggerSourceEthContractEvent_(data TriggerSourceEthContractEvent) TriggerSource {
	return cm.New[TriggerSource](0, data)
}

// EthContractEvent returns a non-nil *[TriggerSourceEthContractEvent] if [TriggerSource] represents the variant case "eth-contract-event".
func (self *TriggerSource) EthContractEvent() *TriggerSourceEthContractEvent {
	return cm.Case[TriggerSourceEthContractEvent](self, 0)
}

// TriggerSourceCosmosContractEvent_ returns a [TriggerSource] of case "cosmos-contract-event".
func TriggerSourceCosmosContractEvent_(data TriggerSourceCosmosContractEvent) TriggerSource {
	return cm.New[TriggerSource](1, data)
}

// CosmosContractEvent returns a non-nil *[TriggerSourceCosmosContractEvent] if [TriggerSource] represents the variant case "cosmos-contract-event".
func (self *TriggerSource) CosmosContractEvent() *TriggerSourceCosmosContractEvent {
	return cm.Case[TriggerSourceCosmosContractEvent](self, 1)
}

// TriggerSourceManual returns a [TriggerSource] of case "manual".
func TriggerSourceManual() TriggerSource {
	var data struct{}
	return cm.New[TriggerSource](2, data)
}

// Manual returns true if [TriggerSource] represents the variant case "manual".
func (self *TriggerSource) Manual() bool {
	return self.Tag() == 2
}

var _TriggerSourceStrings = [3]string{
	"eth-contract-event",
	"cosmos-contract-event",
	"manual",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v TriggerSource) String() string {
	return _TriggerSourceStrings[v.Tag()]
}

// TriggerConfig represents the record "wavs:worker/layer-types@0.3.0-rc1#trigger-config".
//
//	record trigger-config {
//		service-id: string,
//		workflow-id: string,
//		trigger-source: trigger-source,
//	}
type TriggerConfig struct {
	_             cm.HostLayout `json:"-"`
	ServiceID     string        `json:"service-id"`
	WorkflowID    string        `json:"workflow-id"`
	TriggerSource TriggerSource `json:"trigger-source"`
}

// TriggerDataEthContractEvent represents the record "wavs:worker/layer-types@0.3.0-rc1#trigger-data-eth-contract-event".
//
//	record trigger-data-eth-contract-event {
//		contract-address: eth-address,
//		chain-name: string,
//		log: eth-event-log-data,
//		block-height: u64,
//	}
type TriggerDataEthContractEvent struct {
	_               cm.HostLayout   `json:"-"`
	ContractAddress EthAddress      `json:"contract-address"`
	ChainName       string          `json:"chain-name"`
	Log             EthEventLogData `json:"log"`
	BlockHeight     uint64          `json:"block-height"`
}

// TriggerDataCosmosContractEvent represents the record "wavs:worker/layer-types@0.3.0-rc1#trigger-data-cosmos-contract-event".
//
//	record trigger-data-cosmos-contract-event {
//		contract-address: cosmos-address,
//		chain-name: string,
//		event: cosmos-event,
//		block-height: u64,
//	}
type TriggerDataCosmosContractEvent struct {
	_               cm.HostLayout `json:"-"`
	ContractAddress CosmosAddress `json:"contract-address"`
	ChainName       string        `json:"chain-name"`
	Event           CosmosEvent   `json:"event"`
	BlockHeight     uint64        `json:"block-height"`
}

// TriggerData represents the variant "wavs:worker/layer-types@0.3.0-rc1#trigger-data".
//
//	variant trigger-data {
//		eth-contract-event(trigger-data-eth-contract-event),
//		cosmos-contract-event(trigger-data-cosmos-contract-event),
//		raw(list<u8>),
//	}
type TriggerData cm.Variant[uint8, TriggerDataCosmosContractEventShape, TriggerDataCosmosContractEvent]

// TriggerDataEthContractEvent_ returns a [TriggerData] of case "eth-contract-event".
func TriggerDataEthContractEvent_(data TriggerDataEthContractEvent) TriggerData {
	return cm.New[TriggerData](0, data)
}

// EthContractEvent returns a non-nil *[TriggerDataEthContractEvent] if [TriggerData] represents the variant case "eth-contract-event".
func (self *TriggerData) EthContractEvent() *TriggerDataEthContractEvent {
	return cm.Case[TriggerDataEthContractEvent](self, 0)
}

// TriggerDataCosmosContractEvent_ returns a [TriggerData] of case "cosmos-contract-event".
func TriggerDataCosmosContractEvent_(data TriggerDataCosmosContractEvent) TriggerData {
	return cm.New[TriggerData](1, data)
}

// CosmosContractEvent returns a non-nil *[TriggerDataCosmosContractEvent] if [TriggerData] represents the variant case "cosmos-contract-event".
func (self *TriggerData) CosmosContractEvent() *TriggerDataCosmosContractEvent {
	return cm.Case[TriggerDataCosmosContractEvent](self, 1)
}

// TriggerDataRaw returns a [TriggerData] of case "raw".
func TriggerDataRaw(data cm.List[uint8]) TriggerData {
	return cm.New[TriggerData](2, data)
}

// Raw returns a non-nil *[cm.List[uint8]] if [TriggerData] represents the variant case "raw".
func (self *TriggerData) Raw() *cm.List[uint8] {
	return cm.Case[cm.List[uint8]](self, 2)
}

var _TriggerDataStrings = [3]string{
	"eth-contract-event",
	"cosmos-contract-event",
	"raw",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v TriggerData) String() string {
	return _TriggerDataStrings[v.Tag()]
}

// TriggerAction represents the record "wavs:worker/layer-types@0.3.0-rc1#trigger-action".
//
//	record trigger-action {
//		config: trigger-config,
//		data: trigger-data,
//	}
type TriggerAction struct {
	_      cm.HostLayout `json:"-"`
	Config TriggerConfig `json:"config"`
	Data   TriggerData   `json:"data"`
}

// LogLevel represents the variant "wavs:worker/layer-types@0.3.0-rc1#log-level".
//
//	variant log-level {
//		error,
//		warn,
//		info,
//		debug,
//		trace,
//	}
type LogLevel uint8

const (
	LogLevelError LogLevel = iota
	LogLevelWarn
	LogLevelInfo
	LogLevelDebug
	LogLevelTrace
)

var _LogLevelStrings = [5]string{
	"error",
	"warn",
	"info",
	"debug",
	"trace",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e LogLevel) String() string {
	return _LogLevelStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e LogLevel) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *LogLevel) UnmarshalText(text []byte) error {
	return _LogLevelUnmarshalCase(e, text)
}

var _LogLevelUnmarshalCase = cm.CaseUnmarshaler[LogLevel](_LogLevelStrings[:])
